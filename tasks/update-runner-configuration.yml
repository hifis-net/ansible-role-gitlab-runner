# SPDX-FileCopyrightText: 2020 Helmholtz Centre for Environmental Research (UFZ)
# SPDX-FileCopyrightText: 2020 Helmholtz-Zentrum Dresden-Rossendorf (HZDR)
#
# SPDX-License-Identifier: Apache-2.0

---

- name: Configure global section
  when: "not gitlab_runner_is_initial_dryrun"  # skip if run for the first time in check mode
  block:
    - name: Set concurrent limit value
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^\s*limit =.*'
        line: '  limit = {{ gitlab_runner.limit | default(0) }}'
        state: present
        insertafter: '^\s*name ='
        backrefs: no
      check_mode: no
      notify:
        - Restart GitLab-Runner

    - name: Set output_limit value
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^\s*output_limit =.*'
        line: '  output_limit = {{ gitlab_runner.output_limit | default(4096) }}'
        state: present
        insertafter: '^\s*limit ='
        backrefs: no
      check_mode: no
      notify:
        - Restart GitLab-Runner

    - name: Set url value
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)url =.*'
        line: '\1url = "{{ gitlab_runner.url }}"'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner

    - name: Set executor value
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)executor =.*'
        line: '\1executor = "{{ gitlab_runner.executor }}"'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner

    - name: "Configure environment variables"
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)environment =.*'
        line: '\1environment = {{ gitlab_runner.environment | default([]) | to_json }}'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner

- name: Configure [runners.docker] section
  when:
    - '"docker" in gitlab_runner.executor'
    - "not gitlab_runner_is_initial_dryrun"  # skip if run for the first time in check mode
  block:
    - name: Set default docker image
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)image =.*'
        line: '\1image = "{{ gitlab_runner.docker_image }}"'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: Configure privileged mode
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)privileged =.*'
        line: '\1privileged = {{ gitlab_runner.docker_privileged | default(false) | to_json }}'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: Configure local docker caching
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)disable_cache =.*'
        line: '\1disable_cache = {{ gitlab_runner.docker_disable_cache | default(false) | to_json }}'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: "Configure TLS verification of connections to docker daemon"
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)tls_verify =.*'
        line: '\1tls_verify = {{ gitlab_runner.docker_tls_verify | default(false) | to_json }}'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: "Configure docker security options"
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)security_opts =.*'
        line: '\1security_opts = {{ gitlab_runner.docker_security_opts | default([]) | to_json }}'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: "Configure docker devices"
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)devices =.*'
        line: '\1devices = {{ gitlab_runner.docker_devices | default([]) | to_json }}'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: "Configure docker volumes"
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)volumes =.*'
        line: '\1volumes = {{ gitlab_runner.docker_volumes | default([]) | to_json }}'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: "Configure shm_size parameter"
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)shm_size =.*'
        line: '\1shm_size = {{ gitlab_runner.docker_shm_size | default(0) }}'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: "Configure network_mtu parameter"
      when: "gitlab_runner.docker_network_mtu is defined"
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)network_mtu =.*'
        line: '    network_mtu = {{ gitlab_runner.docker_network_mtu }}'
        state: present
        insertafter: '^\s*shm_size =.*'
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: "Configure cpus parameter"
      when: "gitlab_runner.docker_cpus is defined"
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)cpus =.*'
        line: '\1cpus = "{{ gitlab_runner.docker_cpus }}"'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: "Configure memory parameter"
      when: "gitlab_runner.docker_memory is defined"
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)memory =.*'
        line: '\1memory = "{{ gitlab_runner.docker_memory }}"'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: "Configure gpus parameter"
      when: "gitlab_runner.docker_gpus is defined"
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)gpus =.*'
        line: '\1gpus = "{{ gitlab_runner.docker_gpus }}"'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner

- name: Configure [runners.machine] section
  when:
    - 'gitlab_runner.executor == "docker+machine"'
    - "not gitlab_runner_is_initial_dryrun"  # skip if run for the first time in check mode
  block:
    - name: "Configure idle count"
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)IdleCount =.*'
        line: '    IdleCount = {{ gitlab_runner.machine_idle_count | default(0) }}'
        state: present
        insertafter: '^\s*\[runners.machine\]'
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: "Configure idle time"
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)IdleTime =.*'
        line: '    IdleTime = {{ gitlab_runner.machine_idle_time | default(0) }}'
        state: present
        insertafter: '^\s*IdleCount =.*'
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: "Configure max growth rate"
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)MaxGrowthRate =.*'
        line: '    MaxGrowthRate = {{ gitlab_runner.machine_max_growth_rate | default(0) }}'
        state: present
        insertafter: '^\s*IdleTime =.*'
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: "Configure max builds per machine"
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)MaxBuilds =.*'
        line: '    MaxBuilds = {{ gitlab_runner.machine_max_builds | default(0) }}'
        state: present
        insertafter: '^\s*MaxGrowthRate =.*'
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: Configure docker-machine driver
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)MachineDriver =.*'
        line: '\1MachineDriver = "{{ gitlab_runner.machine_driver }}"'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: Configure docker-machine name
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)MachineName =.*'
        line: '\1MachineName = "{{ gitlab_runner.machine_name }}"'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: Configure docker-machine options
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)MachineOptions =.*'
        line: '\1MachineOptions = {{ gitlab_runner.machine_options | to_json }}'
        state: present
        backrefs: yes
      check_mode: no
      notify:
        - Restart GitLab-Runner

- name: Configure [runners.cache] section
  when:
    - '(gitlab_runner.cache_type | default("")) == "s3"'
    - "not gitlab_runner_is_initial_dryrun"  # skip if run for the first time in check mode
  block:
    - name: Configure cache type
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)Type =.*'
        line: '    Type = "{{ gitlab_runner.cache_type }}"'
        state: present
        insertafter: '^\s*\[runners.cache\]'
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: Configure S3 server address
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)ServerAddress =.*'
        line: '      ServerAddress = "{{ gitlab_runner.cache_server_address }}"'
        state: present
        insertafter: '^\s*\[runners.cache.s3\]'
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: Configure S3 access key
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)AccessKey =.*'
        line: '      AccessKey = "{{ gitlab_runner.cache_access_key }}"'
        state: present
        insertafter: '^(\s*)ServerAddress =.*'
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: Configure S3 secret key
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)SecretKey =.*'
        line: '      SecretKey = "{{ gitlab_runner.cache_secret_key }}"'
        state: present
        insertafter: '^(\s*)AccessKey =.*'
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: Configure S3 bucket name
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)BucketName =.*'
        line: '      BucketName = "{{ gitlab_runner.cache_bucket_name }}"'
        state: present
        insertafter: '^(\s*)SecretKey =.*'
      check_mode: no
      notify:
        - Restart GitLab-Runner
    - name: Configure S3 insecure
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)Insecure =.*'
        line: '      Insecure = {{ gitlab_runner.cache_insecure }}'
        state: present
        insertafter: '^(\s*)BucketName =.*'
      check_mode: no
      notify:
        - Restart GitLab-Runner
    
    - name: Configure S3 bucket location
      when: "gitlab_runner.cache_bucket_location is defined"
      ansible.builtin.lineinfile:
        dest: "{{ tmp_runner_config_file.path }}"
        regexp: '^(\s*)BucketLocation =.*'
        line: '      BucketLocation = "{{ gitlab_runner.cache_bucket_location }}"'
        state: present
        insertafter: '^(\s*)Insecure =.*'
      check_mode: no
      notify:
        - Restart GitLab-Runner
...
