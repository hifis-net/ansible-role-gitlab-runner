# SPDX-FileCopyrightText: 2020 Helmholtz Centre for Environmental Research (UFZ)
# SPDX-FileCopyrightText: 2020 Helmholtz-Zentrum Dresden-Rossendorf (HZDR)
#
# SPDX-License-Identifier: Apache-2.0

---

# Global configuration
- name: "Set concurrent value"
  ansible.builtin.lineinfile:
    dest: "{{ gitlab_runner_config_path }}"
    regexp: '^(\s*)concurrent =.*'
    line: '\1concurrent = {{ gitlab_runner_concurrent }}'
    state: present
    backrefs: yes
  when: "not gitlab_runner_is_initial_dryrun"  # skip if run for the first time in check mode
  notify:
    - Restart GitLab-Runner

- name: "Set listen_address value"
  ansible.builtin.lineinfile:
    dest: "{{ gitlab_runner_config_path }}"
    regexp: '^(\s*)listen_address =.*'
    line: 'listen_address = "{{ gitlab_runner_listen_address }}"'
    state: present
    insertafter: '^\s*concurrent =.*'
  when: "not gitlab_runner_is_initial_dryrun"  # skip if run for the first time in check mode
  notify:
    - Restart GitLab-Runner

# Isolate runner specific configuration
- name: Get base64 encoded runner configuration
  ansible.builtin.slurp:
    src: "{{ gitlab_runner_config_path }}"
  register: runner_config_base64
  when: "not gitlab_runner_is_initial_dryrun"  # skip if run for the first time in check mode

- name: "Create a temporary working directory"
  ansible.builtin.tempfile:
    state: directory
    suffix: gitlab-runner-configs
  register: tmp_runner_config_dir
  check_mode: no
  changed_when: false
  when: "not gitlab_runner_is_initial_dryrun"  # skip if run for the first time in check mode

- name: "Split runner configuration"
  ansible.builtin.set_fact:
    runner_configs: "{{ (runner_config_base64['content'] | b64decode).split('[[runners]]\n') }}"
  when: "not gitlab_runner_is_initial_dryrun"  # skip if run for the first time in check mode

- name: "Update configuration for each runner individually"
  ansible.builtin.include_tasks: separate-runner-configuration.yml
  no_log: true
  when: "not gitlab_runner_is_initial_dryrun"  # skip if run for the first time in check mode
  loop: "{{ runner_configs }}"
  loop_control:
    loop_var: runner_config
    index_var: runner_config_index

- name: Merge individual files back into a single configuration file
  ansible.builtin.assemble:
    src: "{{ tmp_runner_config_dir.path }}"
    dest: "{{ gitlab_runner_config_path }}"
    delimiter: "[[runners]]\n"
    backup: yes
    validate: "gitlab-runner verify -c %s"
    owner: "{{ gitlab_runner_config_owner | default('root') }}"
    group: "{{ gitlab_runner_config_group | default('root') }}"
    mode: 0600
  when: "not gitlab_runner_is_initial_dryrun"  # skip if run for the first time in check mode

...
